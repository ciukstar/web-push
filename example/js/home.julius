// using a global variable to store subscribtion information
window.PushSubscription = undefined;
window.applicationServerKey = new Uint8Array(#{toJSON applicationServerKey});

// function to subscribe to push notification
function pushNotificationSubscribe(serviceWorkerRegistration) {
    serviceWorkerRegistration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: window.applicationServerKey,
    })
    .then(function(subscription) {
        window.PushSubscription = subscription;
        console.log("Subscribed to push notifications.")
    })
    .catch(function(e) {
        console.error("Push notifications disabled on this browser.");
    })
};

// function to unsubscribe from push notification
function pushNotificationUnsubscribe( pushSubscription ) {
    return new Promise((resolve, reject) => {
        pushSubscription.unsubscribe()
        .then(function(successful) {
            console.log("Unsubscribed from push notifications.");
            window.PushSubscription = undefined;
            resolve();
        })
        .catch(function(e) {
            console.error("Push notifications disabled on this browser.");
            reject();
        });
    });
};

// function to send a push notification
function sendPushNotification(text){
    if (window.PushSubscription){
        $.ajax({ url: '@{NotifyR}',
                 type:'POST',
                 data: {
                     endpoint: window.PushSubscription.endpoint,
                     auth: window.PushSubscription.toJSON().keys.auth,
                     p256dh: window.PushSubscription.toJSON().keys.p256dh,
                     text: text
                 },
                 dataType: 'json',
                 success: function(response){
                     console.log(response);
                 },
                 error: function(jqxhr) {
                     console.error(jqxhr);
                 }
        });
      } else {
          console.error("No push notification subscription found.");
      }
}

function equalArrayBuffers(b1, b2){
    if (b1.byteLength != b2.byteLength) return false;
    var a1 = new Uint8Array(b1);
    var a2 = new Uint8Array(b2);
    for (var i = 0 ; i < b1.byteLength ; i++)
    {
        if (a1[i] != a2[i]) return false;
    }
    return true;
}

// function to set up push notifications
function pushNotificationInitialize() {
    if (!('serviceWorker' in navigator)) {
       console.error("Push notifications are not supported on this browser.");
    } else {
        // try installing the service worker
        navigator.serviceWorker.register('@{ServiceWorkerR}')
            .then(function(){

                if (!('showNotification' in ServiceWorkerRegistration.prototype)) {
                   console.error("Push notifications are not supported on this browser.");
                   return;
                }
                // The user denied the notification permission which
                // means we failed to subscribe and the user will need
                // to manually change the notification permission to
                // subscribe to push messages
                if (Notification.permission === "denied"  || Notification.permission === 'blocked') {
                   console.error("Push notifications blocked. Please allow notifications from browser settings to use this option.");
                   return;
                }
                if (!('PushManager' in window)) {
                   console.error("Push notifications are not supported on this browser.");
                   return;
                }

                navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
                   // check for existing subscriptions
                   serviceWorkerRegistration.pushManager.getSubscription()
                       .then(function(subscription) {
                           if (!subscription) {
                               // Try subscribing to push notifications if a subscription does not exist
                               pushNotificationSubscribe(serviceWorkerRegistration);
                           } else {
                               console.log("Already subscribed to push notifications.")
                               if(!equalArrayBuffers(subscription.options.applicationServerKey, window.applicationServerKey.buffer) )
                               {
                                   // If VAPID keys have changed since last subscription then re-subscribe
                                   console.log("But the VAPID keys have changed since previous subscription, so unsubscribing and subscribing again.");
                                   pushNotificationUnsubscribe(subscription)
                                   .then( () => pushNotificationSubscribe(serviceWorkerRegistration) )
                                   .catch( () => pushNotificationSubscribe(serviceWorkerRegistration) );
                               } else {
                                   window.PushSubscription = subscription;
                               }
                           }
                       })
                       .catch(function(err) {
                           pushNotificationSubscribe();
                       });
                });
            })
            .catch(function(err){
                console.error("Error installing service worker", err);
            })
    }
};

pushNotificationInitialize();
// in production use sync this final subscription stored in window.pushSubscription
// with the database to send notifications to the user
// and privately save the VAPID keys and use them for all push notifications
// If VAPID keys are lost or re-generated, all push notifications will require re-subscriptions
